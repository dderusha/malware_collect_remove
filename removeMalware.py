#!/usr/bin/env python


import os
from SystemConfiguration import SCDynamicStoreCopyConsoleUser
import sys
import shutil

username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]
username = [username,""][username in [u"loginwindow", None, u""]]

applications = "/Applications/"
#path_library = "/Library/"
path_user_library = "/Users/{}/Library".format(username)
path_user_library_app_sup = "{}/Application Support".format(path_user_library)
path_user_prefs = "{}/Preferences".format(path_user_library_app_sup)
path_launchagents = "{}/LaunchAgents".format(path_user_library)
#malware_apps = "{}apps".format(applications)

#/Applications
apps = ['Advanced Mac Cleaner.app', '__MACOSX', 'Mac Adware Cleaner.app', 'Mac Space Reviver.app', 'Malware Crusher.app']
# /Users/User/Library/Application Support/
directory = ['/awc', '/amc', '/MCR', '/adc', '/Advanced Mac Cleaner', '/MacKeeper 3' '/videosubscriptionsd', '/Malware Crusher', '/Mac Adware Cleaner', '/Mac Space Reviver', 'Mac Ads Cleaner', 'Mac File Opener']
#/Users/user/Library/
library = ['/hipradc', '/hipramc', '/hiprawc', '/hiprmcr', '/hlpradc', '/hlpramc', '/hlprawc', '/hlpramc', '/hlprmcr', '/Mac Ads Cleaner', '/Mac Adware Cleaner', '/Mac Space Reviver', '/Malware Crusher', '/Advanced Mac Cleaner']
#/Users/user/Library/LaunchAgents
launchagent = ['/com.adwarecleaner.hlprawc.plist', '/com.pcv.hlpramcn.plist', '/com.techyutils.mchlpr.plist', '/com.adscleaner.hlpradc.plist']

application_rm = [applications + file_name for file_name in apps ]
app_support_rm = [path_user_library_app_sup + file_name for file_name in directory]
user_library_rm = [path_user_library + file_name for file_name in library]
launchagent_rm = [path_launchagents + file_name for file_name in launchagent]
#removal_list = file_paths + file_path1


for app in application_rm:
    if os.path.isdir(app):
        shutil.rmtree(app)
        print("removed {}".format(app))
    else:
        if os.path.isfile(app):
            print('{} is a file, not an app or dir')
        else:
            print("already removed {}".format(app))

# if application_rm:
#     shutil.rmtree(application_rm)
#     print("removed {}".format(application_rm))
# else:
#     print("already removed {}".format(application_rm))

for appsupport in app_support_rm:
    if os.path.isdir(appsupport):
        print("Removing {}".format(appsupport))
        shutil.rmtree(appsupport)
    else:
        print("already removed {}".format(appsupport))

for userlibrary in user_library_rm:
    if os.path.isdir(userlibrary):
        print("Removing {}".format(userlibrary))
        shutil.rmtree(userlibrary)
    else:
        print("already removed {}".format(userlibrary))

for launchA in launchagent_rm:
    if os.path.isfile(launchA):
        print("Removing {}".format(launchA))
        os.remove(launchA)
    else:
        print("already removed {}".format(launchA))
